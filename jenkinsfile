pipeline {
    agent any

    environment {
        // Define environment variables here
        MY_ENV_VAR = 'Custom Value'
    }

    stages {
        stage('Checkout') {
            steps {
                script {
                    // Clone the Git repository's master branch
                    def gitRepoUrl = 'https://github.com/ankit-pandeyy/Docker.git'

                    checkout([$class: 'GitSCM', 
                        branches: [[name: '*/main']], 
                        userRemoteConfigs: [[url: gitRepoUrl]], 
                        extensions: [[$class: 'CleanBeforeCheckout'], [$class: 'CloneOption', noTags: false, shallow: true, depth: 1]]
                    ])
                }
            }
        }

        stage('Build') {
            steps {
                // Build your application here (e.g., compile, package, etc.)
                sh '''
                ls
                echo "In Build Step"
                '''
            }
        }

        stage('Test') {
            steps {
                // Run your tests (e.g., unit tests, integration tests)
                sh 'echo "In Test Step"'
            }
        }

        stage('Deploy') {
                 input {
                message 'Deploy?'
                ok 'Do it!'
                parameters {
                    //string(name: 'TARGET_ENVIRONMENT', defaultValue: 'PROD', description: 'Target deployment environment')
                   choice(name: 'TARGET_ENVIRONMENT' , choices: ['PROD', 'PROD1', 'PROD2'])
                }
              }
              steps {
                script {
                    switch(params.TARGET_ENVIRONMENT) {
                        case "PROD": echo "PROD "; break
                        case "PROD1": echo "PROD1"; break
                        case "PROD2": echo "./deploy.sh prod"; break
                    }
                }
            }
}
    

    post {
        success {
            // Actions to perform when the pipeline succeeds
            echo 'Pipeline succeeded!'
        }
        failure {
            // Actions to perform when the pipeline fails
            echo 'Pipeline failed!'
        }
    }
}
}
